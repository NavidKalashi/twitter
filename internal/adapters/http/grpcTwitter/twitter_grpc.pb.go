// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: twitter.proto

package grpcTwitter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TwitterService_CreateTweet_FullMethodName = "/twitter.TwitterService/CreateTweet"
	TwitterService_GetTweet_FullMethodName    = "/twitter.TwitterService/GetTweet"
)

// TwitterServiceClient is the client API for TwitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitterServiceClient interface {
	CreateTweet(ctx context.Context, in *CreateTweetRequest, opts ...grpc.CallOption) (*CreateTweetResponse, error)
	GetTweet(ctx context.Context, in *GetTweetRequest, opts ...grpc.CallOption) (*GetTweetResponse, error)
}

type twitterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitterServiceClient(cc grpc.ClientConnInterface) TwitterServiceClient {
	return &twitterServiceClient{cc}
}

func (c *twitterServiceClient) CreateTweet(ctx context.Context, in *CreateTweetRequest, opts ...grpc.CallOption) (*CreateTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTweetResponse)
	err := c.cc.Invoke(ctx, TwitterService_CreateTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterServiceClient) GetTweet(ctx context.Context, in *GetTweetRequest, opts ...grpc.CallOption) (*GetTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTweetResponse)
	err := c.cc.Invoke(ctx, TwitterService_GetTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitterServiceServer is the server API for TwitterService service.
// All implementations must embed UnimplementedTwitterServiceServer
// for forward compatibility.
type TwitterServiceServer interface {
	CreateTweet(context.Context, *CreateTweetRequest) (*CreateTweetResponse, error)
	GetTweet(context.Context, *GetTweetRequest) (*GetTweetResponse, error)
	mustEmbedUnimplementedTwitterServiceServer()
}

// UnimplementedTwitterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTwitterServiceServer struct{}

func (UnimplementedTwitterServiceServer) CreateTweet(context.Context, *CreateTweetRequest) (*CreateTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTweet not implemented")
}
func (UnimplementedTwitterServiceServer) GetTweet(context.Context, *GetTweetRequest) (*GetTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweet not implemented")
}
func (UnimplementedTwitterServiceServer) mustEmbedUnimplementedTwitterServiceServer() {}
func (UnimplementedTwitterServiceServer) testEmbeddedByValue()                        {}

// UnsafeTwitterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitterServiceServer will
// result in compilation errors.
type UnsafeTwitterServiceServer interface {
	mustEmbedUnimplementedTwitterServiceServer()
}

func RegisterTwitterServiceServer(s grpc.ServiceRegistrar, srv TwitterServiceServer) {
	// If the following call pancis, it indicates UnimplementedTwitterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TwitterService_ServiceDesc, srv)
}

func _TwitterService_CreateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServiceServer).CreateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitterService_CreateTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServiceServer).CreateTweet(ctx, req.(*CreateTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterService_GetTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServiceServer).GetTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitterService_GetTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServiceServer).GetTweet(ctx, req.(*GetTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitterService_ServiceDesc is the grpc.ServiceDesc for TwitterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "twitter.TwitterService",
	HandlerType: (*TwitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTweet",
			Handler:    _TwitterService_CreateTweet_Handler,
		},
		{
			MethodName: "GetTweet",
			Handler:    _TwitterService_GetTweet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twitter.proto",
}
